"""
***************************************************
Import packages
***************************************************
"""

import casadi
import numpy

"""
****************************************************
Minimization Procedures from scipy.optimization
****************************************************
"""

__all__ = ['minimize']

def objective(functions):
    """
    Args:
        :functions:     list with functions
    Return
        :obj            symbolic objective function

    """
    
    obj = 0
    for f in functions: obj += f**2
    return obj


def convert_sympy_vars_to_casadi(x_symbolic):
    """ converting sympy symbols to variables in casaid.SX.sym formate. The
    variables are returned in a list.
    
    Args:
        :x_symbolic:     list wit symbolic state variables in sypmy logic

    """
    
    x_casadi = []
    for xs in x_symbolic:
        exec("%s = casadi.SX.sym('%s')" % (repr(xs), repr(xs)))
        exec("xSymbolicInCasadi.append(%s)" % (repr(xs)))
    return x_casadi


def minimize(curBlock, solv_options, dict_options):
    """ This function calls the ipopt solver.
    
    Args:
        :curBlock:      object of class Block with block information
        :solv_options:  dictionary with solver settings
        :dict_options:  dictionary with user-specified settings  
        
    """
    x_sympy = curBlock.x_sym_tot[curBlock.colPerm] 
    x_casadi = convert_sympy_vars_to_casadi(x_sympy)
    x_0 = numpy.array(curBlock.getIterVarValues(), dtype=float)
    x_Bounds = curBlock.getIterVarBoundValues()    
    x_L = numpy.array(x_Bounds[:,0], dtype=float)
    x_U = numpy.array(x_Bounds[:,1], dtype=float)    
    
    obj = objective(curBlock.getSymbolicFunctions())
    nlp = {'x':casadi.vertcat(*x_casadi), 'f':obj(*x_casadi)}
    
    S = casadi.nlpsol('S', 'ipopt', nlp)


    r = S(x0=x_0, lbx=x_L, ubx=x_U, lbg=0, ubg=0)
    x_opt = r['x']
    
    
    
    